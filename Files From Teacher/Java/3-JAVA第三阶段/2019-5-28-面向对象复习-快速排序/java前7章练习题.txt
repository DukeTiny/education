			1.写出程序运行结果
			class Demo {
				public static void func() {
					try {
						throw new Exception();
					} finally {
						System.out.println("B");
					}
				}
				public static void main(String[] args) {
					try {
						func();
						System.out.println("A");
					} catch(Exception e) {
						System.out.println("C");
					}
					System.out.println("D");
				}
			}
			不能编译
			====================================================
			
			2.写出程序运行结果
			class Demo {
				public static void func() throw Exception {
					try {
						throw new Exception();
					} finally {
						System.out.println("B");
					}
				}
				public static void main(String[] args) {
					try {
						func();
						System.out.println("A");
					} catch(Exception e) {
						System.out.println("C");
					}
					System.out.println("D");
				}
			}
			B
			C
			D
			====================================================
			
			3.写出程序运行结果
			class Foo {
				public Foo() {
					System.out.println("Foo()");
				}
				
				{
					System.out.println("Foo: { }");
				}
			}
			
			class Bar extends Foo {
				public Bar() {
					System.out.println("Bar()");
				}
				static {
					System.out.println("Bar static: { }");
				}
				public static void main(String[] args) {
					new Bar();
					new Bar();
				}
			}
			Bar Static:{}
			Foo:{}
			Foo:()
			Bar:()
			Foo:{}
			Foo:()
			Bar:()
			
			====================================================
			
			4.写出运行结果
			interface A { }
			class B implements A {
				public String f1() {
					return "I can fly";
				}	
			}
			class Demo {
				public static void main(String[] args) {
					A a = new B();
					System.out.println(a.f1());
				}
			}
			不能编译
			====================================================
			
			5.写出运行结果
			class Fu {
				boolean show(char a) {
					System.out.println(a);
					return true;
				}
			}
			class Demo extends Fu {
				public static void main(String[] args) {
					int i = 0;
					Fu f = new Demo();
					Demo d = new Demo();
					for(f.show('A'); f.show('B') && i < 2; f.show('C')) {
						i++;
						d.show('D');
					}
				}
				boolean show(char c) {
					System.out.println(c);
					return false;
				}
			}
			A
			B
			====================================================
			
			6.写出运行结果
			class Super {
				int i = 0;
				Super() {
					this(1,2);
					System.out.println("A");
					i += 2;
				}
				Super(String str) {
					this();
					System.out.println(str);
					i += 4;
				}
				Super(int a, int b) {
					i -= a;
					i *= b;
				}
				
			}
			class Demo extends Super {
				public Demo() {
					
				}
				public Demo(String a) {
					super("tomcat");
					System.out.println("B");
					i = 5;
				}
				public static void main(String[] args) {
					Super s = new Demo("C");
					System.out.println(s.i);
				}
			}
			A
			tomcat
			B
			5
			
			====================================================
			
			7. 
			interface Inter {
				void show(int a, int b);
				void func();
			}
			
			class Demo {
				public static void main(String[] args) {
					Inter inter = new Inter() {
			            @Override
			            public void show(int a, int b) {
			                System.out.println(a);
			                System.out.println(b);
			            }
			
			            @Override
			            public void func() {
			                System.out.println("func");
			            }
			        };
			        inter.show(1,2);
			        inter.func();
				}
			}
			
			====================================================
			
			8.写出运行结果
			class Outer {
				int y = 6;
			class Inner {
					static int y = 3;
					void show() {
						System.out.println(y);
					}
				}
			}
			class Demo {
				public static void main(String[] args) {
					Outer.Inner obj = new Outer().new Inner();
					obj.show();
				}
			}
			不能通过编译
			
			====================================================
			
			9.多项选择题，选出正确的选项，并写出错误项错误的原因
			class Demo {
				int show(int a, int b) {
					return 0;
				}
			}
			下面哪些方法可以存在于Demo类中
			A. public void show(int a, int b) { }
			B. protected String show() { }
			C. int show(int x, int y) { return 10; }
			D. void show(int a, String b) { }
			E. public static void show(int m, int n) { }
			F. private final void show(int m, int n) { }
			
			D正确
			====================================================
			
			10.多项选择题，选出正确的选项，并写出错误项错误的原因
			class Demo {
				int show(int a, int b) {
					return 0;
				}
			}
			下面哪些方法可以存在于Demo的子类中
			A.public int show(int a, int b) { return 0; }	
			B.private int show(int a, int b) { return 0; }
			C.private int show(int a, long b) { return 0; }
			D.public int show1(int a, int b) {  }
			E.public void show(int a, int b) {  }
			F.static int show(int a, int b) { return 0; }
			==A\C\
			====================================================
			
			11.写出程序运行结果:
			class Fu {
				int num = 4;
				void show() {
					System.out.println("Fu.show()");
				}
			}
			class Zi extends Fu {
				int num = 5;
				void show() {
					System.out.println("Zi.show()");
				}
			}
			class T {
				public static void main(String[] args) {
					Fu f = new Zi();
					Zi z = new Zi();
					System.out.println(f.num);
					System.out.println(z.num);
					f.show();
					z.show();
				}
			}
			4\5\Zi.show()\Zi.show()
			====================================================
			
			12.按要求补充代码
			interface A { 
				void show();
			}
			interface B {
				int add(int a, int b);
			}
			class C implements A,B {
				private int a;
				private int b;
				int add(int a,int b){
					this.a = a;
					this.b = b;
				}
				void show(){
					System.out.println(a+b);
				}
				// 补充代码
			}
			class D {
				public static void main(String[] args) {
					C c = new C();
					c.add(4,2);
					c.show(); // 通过该方法打印以上两数的和
				}
			}
			
			====================================================
			
			13.写出程序运行结果
			class Demo {
				public static void f1(int x) {
					x = 100;
				}
				public static void main(String[] args) {
					int x = 10;
					f1(x);
					System.out.println(x);
				}
			}
			10
			====================================================
			
			14.写出程序运行结果
			class Demo {
				public static void f1(int[] x) {
					x[0] = 100;
				}
				public static void main(String[] args) {
					int[] x = {1, 2, 3};
					f1(x);
					for(int i : x) {
						System.out.println(i);
					}
				}
			}
			100 2 3
			====================================================
			
			15.写出程序运行结果
			class Demo {
				public static void main(String[] args) {
					try {
						f1();		
						System.out.println("A");
					} catch(Exception e) {
						System.out.println("B");			
					} finally {
						System.out.println("C");				
					}
				}
				public static void f1() {
					throw new Exception();
				}
			}
			BC
			====================================================
			
			16.写出运行结果
			class Super {
				int i = 0;
				Super(String str) {
					i = 1;
				}
			}
			class Demo extends Super {
				public Demo(String str) {
					i += 2;
				}
				public static void main(String[] args) {
					Demo d = new Demo("tomcat");
					System.out.println(d.i);
				}
			}
			
			====================================================
			
			17.写出运行结果
			class Super {
				public int get() { return 4; }
			}
			class Sub extends Super {
				public long get() { return 5; }
				public static void main(String[] args) {
					Super s = new Sub();
					System.out.println(s.get());
				}
			}
			
			====================================================
			
			18.写出运行结果
			class Demo {
				public static void  f1() {
					try {
						throw new Exception();
						System.out.println("A");
					} catch(Exception e) {
						System.out.println("B");
					}
				}
				public static void main(String[] args) {
					try {
						f1();
					} catch(Exception e) {
						System.out.println("C");
					}	
					System.out.println("D");
				}
			}
			
			====================================================
			
			19.多项选择
			class Demo {
				public void f1() {
					// 位置1
				}
				class Inner { }
				public static void main(String[] args) {
					Demo d = new Demo();
					// 位置2
				}
			}
			A.位置1写 new Inner();
			B.位置2写 new Inner();
			C.位置2写 d.new Inner();
			D.位置2写 new d.Inner();
			E.位置2写 Demo.new Inner();
			F.位置2写 new Demo.Inner();
			
			====================================================
			
			20.写出程序运行结果
			class E1 extends Exception { }
			class E2 extends E1 { }
			
			class Demo {
				public static void main(String[] args) {
					try { 
						throw new E2();
					} catch(Exception e) {
						System.out.println("A");	
					} catch(E1 e) {
						System.out.println("B");	
					}
				}
			}
			
			====================================================
			
			21.补充代码
			interface Test {
				void f1();
			}
			class Demo {
				public static void main(String[] args) {
					// 补充代码 (匿名内部类),执行show方法
				}
				void show(Test t) {
					t.f1();
				}
			}
			
			====================================================
			
			22.写出程序运行结果
			class Test {
				public static String output = "";
				public static void foo(int i) {
					try {
						if(i == 1) 
							throw new Exception();
						output += "1";
					} catch(Exception e) {
						output += "2";
						return;
					} finally {
						output += "3";
					}
					output += "4";
				}
				public static void main(String[] args) {
					foo(0);
					System.out.println(output);
					foo(1);
					System.out.println(output);
				}
				
			}
			
			====================================================
			
			23.建立一个图形接口，声明一个面积方法。圆形和矩形都实现这个接口，并得出两个图形的面积。
			注：对数值进行判断，用异常处理。不合法的数值要出现“这个值是非法的”提示，不再进行运算。
			
			====================================================
			
			24.补充compare方法中的代码，不许添加其它函数
			class Circle {
				private static int counter = 0;
				private static final id = counter++;
				private static double pi = 3.14;
				private double radius;
				public Circle(double r) {
					radius = r;
				}
				public static Circle compare(Circle[] cir) {
					// 补充代码，返回半径最大的圆
				
				}
				public String toString() {
					return "[圆" + id + ", radius=" + radius + "]";
				}
			}
			class Demo {
				public static void main(String[] args) {
					Circle[] cir = new Circle[3];
					cir[0] = new Circle(1.0);
					cir[1] = new Circle(4.0);
					cir[2] = new Circle(2.0);
					System.out.println("半径最大的圆是: ");
					System.out.println(compare(cir));
				}
			}
			
			====================================================
			
			25.写出程序结果
			public class Demo {
				private static int j = 0;
				private static boolean methodB(int k) {
					j += k;
					return true;
				}
				public static void methodA(int i) {
					boolean b;
					b = i < 10 | methodB(4);
					b = i < 10 || methodB(8);
				}
				public static void main(String[] args) {
					methodA(0);
					System.out.println(j);
					methodA(20);
					System.out.println(j);
				}
			}
			
			====================================================
			
			26.编写一个方法，接收两个参数:一个字符串和一个字符，返回字符在字符串中的位置，如果找不到字符，则返回-1，如果参数传入的内容不对(比如null)，则抛出运行时异常
			
			====================================================
			
			27.写出运行结果
			class A {
				static B b = new B();
				A() {
					System.out.println("A");
				}
			}
			
			class B extends A {
				B() {
					System.out.println("B");
				}
			}
			
			public class Demo10 {
				public static void main(String[] args) {
					A a = new B();
				}
			}
			
			====================================================
			
			28.写出程序运行结果
			class Demo {
				public static void main(String[] args) {
					System.out.println(0144);
					System.out.println(0x64);
					System.out.println(3e2 / 2);
					System.out.println(6 ^ 7);
					System.out.println(6 | 9);
					System.out.println(6 & 3);
					System.out.println(~6);
					System.out.println(6 ^ 99 ^ 99);
					System.out.println(80  >> 33);
					System.out.println(80L >> 65);
					System.out.println(-10 >> 1);
					System.out.println(-10 >>> 1);
					System.out.println(2147483647 + 1);
				}
			}
			
			====================================================
			
			29.写出运行结果
			class Demo {
				static int[] a = new int[10];
				static Boolean[] bb = new Boolean[10];
				public static void main(String[] args) {
					System.out.println(a[9]);
					System.out.println(bb[9]);
				}
			}
			
			====================================================
			
			30.编程题：
			
			a.自己编写代码，将字符串反转。不能使用StringBuffer。
			
			b.自己编写代码，实现String的trim功能。不能使用String的replace方法。
			
			c.计算在一个字符串中，另一个字符串出现的次数。
			
			d.找出两个字符串中最大相同子串
			
			====================================================
			
			31.终极简答题
			
			a.写出java中的8中基本数据类型，以及所占的字节数
			
			b.面向对象的四大特点?  
			
			c.this关键字和super关键字的区别?
			
			d.final、finalize、finally的区别?
			
			e.java的访问修饰有哪些？分别有什么作用?
			
			f.static关键字的作用?
			
			g.描述你对抽象类的认识
			
			h.接口和抽象类的区别?
			
			i.方法重载和方法重写分别是什么?
			
			j.String str = new String("xyz");  创建了几个String Object?
			
			k.short s1 = 1; s1 = s1 + 1; 有什么错?
			  short s1 = 1; s1 += 1; 有什么错?
			
			l.什么是GC? 为什么要有GC?
			
			m.error和exception的区别
			
			n.switch()能作用于哪些数据类型?
			
			o.try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?
			
			p.构造器Constructor是否可被override?
			
			q.接口是否可继承接口? 抽象类是否可实现(implements)接口?抽象类是否可继承实体类?
			
			r.写出你见过的运行时异常
			
			s.数组有没有length()这个方法? String有没有length()这个方法?
			
			t.&和&&的区别
			
			u.>>和>>>的区别
			
			v.Anonymous Inner Class (匿名内部类) 是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)?
			
			w.Math.round(11.5)的值是多少?  Math.round(-11.5)的值是多少
			
			x.一个外部类能被哪些访问修饰符修饰? 一个内部类能被哪些访问修饰符修饰?
			
			y.写出类的实例化过程
			
			z.封装、继承、多态的好处分别有哪些?
			
			
			====================================================
			
			
			
			
